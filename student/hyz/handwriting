{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.rcParams['figure.figsize'] = (7,7) # Make the figures a bit bigger\n",
    "\n",
    "from keras.datasets import mnist\n",
    "from keras.models import Sequential\n",
    "from keras.layers.core import Dense, Dropout, Activation\n",
    "from keras.utils import np_utils"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train original shape (60000, 28, 28)\n",
      "y_train original shape (60000,)\n",
      "X_test0  original shape (28, 28)\n"
     ]
    }
   ],
   "source": [
    "nb_classes = 12\n",
    "\n",
    "# the data, shuffled and split between tran and test sets\n",
    "(X_train, y_train), (X_test, y_test) = mnist.load_data()\n",
    "print(\"X_train original shape\", X_train.shape)\n",
    "print(\"y_train original shape\", y_train.shape)\n",
    "print(\"X_test0  original shape\", X_test[0].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(9):\n",
    "    plt.subplot(3,3,i+1)\n",
    "    plt.imshow(X_train[i], cmap='gray', interpolation='none')\n",
    "    plt.title(\"Class {}\".format(y_train[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 3 18 18 18 126 136 175 26 166 255 247 127 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 30 36 94 154 170 253 253 253 253 253 225 172 253 242 195 64 0 0 0 0 \n",
      "0 0 0 0 0 0 0 49 238 253 253 253 253 253 253 253 253 251 93 82 82 56 39 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 18 219 253 253 253 253 253 198 182 247 241 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 80 156 107 253 253 205 11 0 43 154 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 14 1 154 253 90 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 139 253 190 2 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 11 190 253 70 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 35 241 225 160 108 1 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 0 81 240 253 253 119 25 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 45 186 253 253 150 27 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 93 252 253 187 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 249 253 249 64 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 46 130 183 253 253 207 2 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 39 148 229 253 253 253 250 182 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 24 114 221 253 253 253 253 201 78 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 23 66 213 253 253 253 253 198 81 2 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 18 171 219 253 253 253 253 195 80 9 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 55 172 226 253 253 253 253 244 133 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 136 253 253 253 212 135 132 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
      "[5 0 4 ... 5 6 8]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 32 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for line in X_train[0]:\n",
    "    linestr=''\n",
    "    for pix in line:\n",
    "        linestr+=str(pix)+' '\n",
    "    print(linestr) \n",
    "\n",
    "for i in range(32):\n",
    "    plt.subplot(8,4,i+1)\n",
    "    plt.imshow(X_train[i], cmap='gray', interpolation='none')\n",
    "    plt.title(\"Class {}\".format(y_train[i]))\n",
    "\n",
    "print(y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "Xtrain0=X_train[0]\n",
    "cv2.imshow(\"mw\",Xtrain0)\n",
    "cv2.waitKey(0)\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training matrix shape (60000, 784)\n",
      "Testing matrix shape (10000, 784)\n"
     ]
    }
   ],
   "source": [
    "X_train = X_train.reshape(60000, 784)\n",
    "X_test = X_test.reshape(10000, 784)\n",
    "X_train = X_train.astype('float32')\n",
    "X_test = X_test.astype('float32')\n",
    "X_train /= 255\n",
    "X_test /= 255\n",
    "print(\"Training matrix shape\", X_train.shape)\n",
    "print(\"Testing matrix shape\", X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.1 0.1 0.1 0.5 0.5 0.7 0.1 0.7 1.0 1.0 0.5 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.1 0.1 0.4 0.6 0.7 1.0 1.0 1.0 1.0 1.0 0.9 0.7 1.0 0.9 0.8 0.3 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.2 0.9 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 1.0 0.4 0.3 0.3 0.2 0.2 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.1 0.9 1.0 1.0 1.0 1.0 1.0 0.8 0.7 1.0 0.9 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.3 0.6 0.4 1.0 1.0 0.8 0.0 0.0 0.2 0.6 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.1 0.0 0.6 1.0 0.4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.5 1.0 0.7 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.7 1.0 0.3 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.1 0.9 0.9 0.6 0.4 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.3 0.9 1.0 1.0 0.5 0.1 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.2 0.7 1.0 1.0 0.6 0.1 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.1 0.4 1.0 1.0 0.7 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 1.0 1.0 0.3 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.2 0.5 0.7 1.0 1.0 0.8 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.2 0.6 0.9 1.0 1.0 1.0 1.0 0.7 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.1 0.4 0.9 1.0 1.0 1.0 1.0 0.8 0.3 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.1 0.3 0.8 1.0 1.0 1.0 1.0 0.8 0.3 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.1 0.7 0.9 1.0 1.0 1.0 1.0 0.8 0.3 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.2 0.7 0.9 1.0 1.0 1.0 1.0 1.0 0.5 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.5 1.0 1.0 1.0 0.8 0.5 0.5 0.1 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n",
      "0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n"
     ]
    }
   ],
   "source": [
    "#print(X_train[0])\n",
    "\n",
    "linestr=''\n",
    "for i in range(len(X_train[0])):\n",
    "    j=i%28\n",
    "    if(j==0):\n",
    "        print(linestr)\n",
    "        linestr=\"\"\n",
    "    linestr+=\"%.1f\"%X_train[0][i]+\" \""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "60000\n",
      "12\n",
      "[[0. 0. 0. ... 0. 0. 0.]\n",
      " [1. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " ...\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]]\n",
      "[[0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 1. ... 0. 0. 0.]\n",
      " [0. 1. 0. ... 0. 0. 0.]\n",
      " ...\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "Y_train = np_utils.to_categorical(y_train, nb_classes)\n",
    "Y_test = np_utils.to_categorical(y_test, nb_classes)\n",
    "print(len(Y_train))\n",
    "print(len(Y_train[0]))\n",
    "print(Y_train)\n",
    "print(Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From c:\\users\\huyunzhe\\kerasenv\\lib\\site-packages\\tensorflow\\python\\framework\\op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "WARNING:tensorflow:From c:\\users\\huyunzhe\\kerasenv\\lib\\site-packages\\keras\\backend\\tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "model.add(Dense(512, input_shape=(784,)))\n",
    "model.add(Activation('relu')) # An \"activation\" is just a non-linear function applied to the output\n",
    "                              # of the layer above. Here, with a \"rectified linear unit\",\n",
    "                              # we clamp all values below 0 to 0.\n",
    "                           \n",
    "model.add(Dropout(0.2))   # Dropout helps protect the model from memorizing or \"overfitting\" the training data\n",
    "model.add(Dense(512))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.2))\n",
    "model.add(Dense(nb_classes))\n",
    "model.add(Activation('softmax')) # This special \"softmax\" activation among other things,\n",
    "                                 # ensures the output is a valid probaility distribution, that is\n",
    "                                 # that its values are all non-negative and sum to 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(loss='categorical_crossentropy', optimizer='adam')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From c:\\users\\huyunzhe\\kerasenv\\lib\\site-packages\\tensorflow\\python\\ops\\math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/4\n",
      "60000/60000 [==============================] - 11s 184us/step - loss: 0.2520 - val_loss: 0.1124\n",
      "Epoch 2/4\n",
      "60000/60000 [==============================] - 10s 165us/step - loss: 0.1044 - val_loss: 0.0854\n",
      "Epoch 3/4\n",
      "60000/60000 [==============================] - 10s 171us/step - loss: 0.0728 - val_loss: 0.0693\n",
      "Epoch 4/4\n",
      "60000/60000 [==============================] - 10s 169us/step - loss: 0.0556 - val_loss: 0.0703\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x2eb2fd5d828>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train, Y_train,\n",
    "          batch_size=128, epochs=4,verbose=1,\n",
    "          validation_data=(X_test, Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000/10000 [==============================] - 1s 50us/step\n",
      "0.07033212079838849\n"
     ]
    }
   ],
   "source": [
    "score = model.evaluate(X_test, Y_test,verbose=1)\n",
    "print(score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[7 2 1 ... 4 5 6]\n",
      "10000\n",
      "[ True  True  True ...  True  True  True]\n",
      "(array([   0,    1,    2, ..., 9997, 9998, 9999], dtype=int64),)\n",
      "correct [   0    1    2 ... 9997 9998 9999]\n",
      "incorrect [ 217  233  247  259  274  321  359  445  447  448  495  582  619  691\n",
      "  720  740  846  951  956  965 1014 1039 1044 1107 1112 1156 1178 1182\n",
      " 1226 1232 1242 1247 1260 1299 1319 1328 1393 1464 1466 1494 1500 1522\n",
      " 1527 1530 1531 1543 1549 1553 1554 1609 1670 1671 1721 1751 1754 1790\n",
      " 1878 1901 1941 1982 2004 2016 2024 2035 2053 2070 2098 2118 2129 2135\n",
      " 2182 2185 2291 2292 2369 2387 2405 2414 2422 2454 2488 2607 2618 2648\n",
      " 2654 2720 2721 2810 2915 2921 2927 2939 2952 2953 2970 3005 3030 3073\n",
      " 3117 3218 3405 3422 3503 3520 3549 3558 3559 3567 3597 3662 3776 3808\n",
      " 3838 3853 3869 3893 3906 3926 3941 3976 3985 3995 4063 4065 4075 4163\n",
      " 4176 4199 4248 4255 4271 4289 4294 4369 4437 4443 4449 4497 4500 4508\n",
      " 4534 4536 4547 4551 4571 4601 4690 4731 4761 4807 4814 4823 4838 4861\n",
      " 4880 4966 4978 5046 5140 5457 5495 5600 5642 5654 5676 5749 5887 5888\n",
      " 5922 5936 5937 5955 5972 5973 5997 6166 6505 6560 6571 6574 6576 6597\n",
      " 6625 6641 6651 6662 6740 6783 6847 7216 7401 7800 7821 7849 7899 7915\n",
      " 7928 8094 8316 8321 8325 8408 8519 8523 9009 9015 9019 9024 9505 9587\n",
      " 9664 9669 9679 9719 9729 9745 9768 9770 9779 9792 9839 9982]\n"
     ]
    }
   ],
   "source": [
    "# The predict_classes function outputs the highest probability class\n",
    "# according to the trained classifier for each input example.\n",
    "predicted_classes = model.predict_classes(X_test)\n",
    "\n",
    "print(predicted_classes)\n",
    "print(len(predicted_classes))\n",
    "\n",
    "# Check which items we got right / wrong\n",
    "predictyes=(predicted_classes == y_test)\n",
    "print(predictyes)\n",
    "\n",
    "predictnum=np.nonzero(predictyes)\n",
    "print(predictnum)\n",
    "\n",
    "correct_indices = np.nonzero(predicted_classes == y_test)[0]\n",
    "incorrect_indices = np.nonzero(predicted_classes != y_test)[0]\n",
    "\n",
    "print(\"correct\",correct_indices)\n",
    "print(\"incorrect\",incorrect_indices)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 9 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "for i, correct in enumerate(correct_indices[:9]):\n",
    "    plt.subplot(3,3,i+1)\n",
    "    plt.imshow(X_test[correct].reshape(28,28), cmap='gray', interpolation='none')\n",
    "    plt.title(\"Predicted {}, Class {}\".format(predicted_classes[correct], y_test[correct]))\n",
    "    \n",
    "plt.figure()\n",
    "for i, incorrect in enumerate(incorrect_indices[:9]):\n",
    "    plt.subplot(3,3,i+1)\n",
    "    plt.imshow(X_test[incorrect].reshape(28,28), cmap='gray', interpolation='none')\n",
    "    plt.title(\"Predicted {}, Class {}\".format(predicted_classes[incorrect], y_test[incorrect]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "img=cv2.imread(r\"C:\\Users\\huyunzhe\\kerasenv\\Scripts\\handnumbers.jpg\")\n",
    "#cv2.imshow(\"mw\",img)\n",
    "#cv2.waitKey(0)\n",
    "\n",
    "W=1280\n",
    "L=1700\n",
    "NW=650\n",
    "NL=900\n",
    "X0=250\n",
    "Y0=150\n",
    "for i in range(2):\n",
    "    for j in range(4):\n",
    "        imdig=img[X0+L*i:X0+L*i+NL,Y0+W*j:Y0+W*j+NW]\n",
    "        cv2.imshow(\"imdig\",imdig)\n",
    "        filename=\"hn\"+str(i)+str(j)+\".jpg\"\n",
    "        cv2.rectangle(img,(Y0+W*j,X0+L*i),(Y0+W*j+NW,X0+L*i+NL),(0,255,0),3)        \n",
    "        cv2.imwrite(filename,imdig)\n",
    "        cv2.waitKey(0)\n",
    "cv2.imshow(\"img\",img)\n",
    "cv2.waitKey()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hn28inv00.jpg\n",
      "hn28inv01.jpg\n",
      "hn28inv02.jpg\n",
      "hn28inv03.jpg\n",
      "hn28inv10.jpg\n",
      "hn28inv11.jpg\n",
      "hn28inv12.jpg\n",
      "hn28inv13.jpg\n"
     ]
    }
   ],
   "source": [
    "for i in range(2):\n",
    "    for j in range(4):\n",
    "        filename=\"hn\"+str(i)+str(j)+\".jpg\"\n",
    "        img = cv2.imread(filename)\n",
    "        GrayImage=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)  \n",
    "        ret,thresh1=cv2.threshold(GrayImage,120,255,cv2.THRESH_BINARY)  \n",
    "        resized_image = cv2.resize(thresh1, (28, 28)) \n",
    "        invimg = ~resized_image\n",
    "        outputfile=\"hn28inv\"+str(i)+str(j)+\".jpg\"\n",
    "        print(outputfile)\n",
    "        cv2.imwrite(outputfile,invimg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "28\n",
      "28\n"
     ]
    }
   ],
   "source": [
    "img = cv2.imread(\"hn28inv10.jpg\")\n",
    "print(len(img))\n",
    "print(len(img[0]))\n",
    "cv2.imshow(\"hninv\",img)\n",
    "cv2.waitKey(0)\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x to be predicted original shape (28, 28, 3)\n",
      "x to be predicted original shape (28, 28)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x2eb305f28d0>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "print(\"x to be predicted original shape\", img.shape)\n",
    "GrayImg=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n",
    "print(\"x to be predicted original shape\", GrayImg.shape)\n",
    "plt.imshow(GrayImg, cmap='gray', interpolation='none')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicating matrix shape (1, 784)\n"
     ]
    }
   ],
   "source": [
    "X_pred = GrayImg.reshape(1, 784)\n",
    "X_pred = X_pred.astype('float32')\n",
    "X_pred /= 255\n",
    "print(\"Predicating matrix shape\", X_pred.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "predicted_classes = model.predict_classes(X_pred)\n",
    "\n",
    "print(predicted_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8, 28, 28)\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy\n",
    "\n",
    "X_pred = numpy.zeros(shape=(8,28,28))\n",
    "index=0\n",
    "\n",
    "for i in range(2):\n",
    "    for j in range(4):\n",
    "        filename=\"hn28inv\"+str(i)+str(j)+\".jpg\"\n",
    "        img = cv2.imread(filename)\n",
    "        GrayImage=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n",
    "        X_pred[index]=cv2.resize(GrayImage, (28, 28))\n",
    "        index+=1\n",
    "print(X_pred.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in range(8):\n",
    "    plt.subplot(2,4,i+1)\n",
    "    plt.imshow(X_pred[i], cmap='gray', interpolation='none')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing matrix shape (8, 784)\n",
      "[9 9 3 5 5 5 6 7]\n"
     ]
    }
   ],
   "source": [
    "X_pred = X_pred.reshape(8, 784)\n",
    "X_pred = X_pred.astype('float32')\n",
    "X_pred /= 255\n",
    "print(\"Testing matrix shape\", X_pred.shape)\n",
    "predicted_classes = model.predict_classes(X_pred)\n",
    "print(predicted_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "model.save(\"ministxkn.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "del model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model not found, you have deleted it on purpose.\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    predicted_classes = model.predict_classes(X_pred)\n",
    "except:\n",
    "    print(\"model not found, you have deleted it on purpose.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras.models import load_model\n",
    "\n",
    "model = load_model('ministxkn.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[9 9 3 5 5 5 6 7]\n"
     ]
    }
   ],
   "source": [
    "predicted_classes = model.predict_classes(X_pred)\n",
    "print(predicted_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(60000, 784)\n",
      "(8, 784)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_pred.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " ...\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]]\n",
      "[[0.         0.         0.         ... 0.         0.         0.        ]\n",
      " [0.         0.         0.         ... 0.         0.         0.        ]\n",
      " [0.         0.         0.         ... 0.         0.         0.        ]\n",
      " ...\n",
      " [0.         0.         0.         ... 0.         0.         0.        ]\n",
      " [0.         0.00784314 0.         ... 0.         0.         0.        ]\n",
      " [0.         0.00392157 0.         ... 0.         0.         0.        ]]\n"
     ]
    }
   ],
   "source": [
    "print(X_train[0:8])\n",
    "print(X_pred[0:8])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train[0:8]=X_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.         0.         0.         ... 0.         0.         0.        ]\n",
      " [0.         0.         0.         ... 0.         0.         0.        ]\n",
      " [0.         0.         0.         ... 0.         0.         0.        ]\n",
      " ...\n",
      " [0.         0.         0.         ... 0.         0.         0.        ]\n",
      " [0.         0.00784314 0.         ... 0.         0.         0.        ]\n",
      " [0.         0.00392157 0.         ... 0.         0.         0.        ]]\n"
     ]
    }
   ],
   "source": [
    "print(X_train[0:8])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5 0 4 1 9 2 1 3 1 4]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(y_train[0:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y_train = np_utils.to_categorical(y_train, nb_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0.]\n",
      " [1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0.]\n",
      " [0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n",
      " [0. 0. 0. 0. 1. 0. 0. 0. 0. 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "print(Y_train[0:10])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 60000 samples, validate on 10000 samples\n",
      "Epoch 1/4\n",
      "60000/60000 [==============================] - 12s 195us/step - loss: 0.0487 - val_loss: 0.0641\n",
      "Epoch 2/4\n",
      "60000/60000 [==============================] - 10s 166us/step - loss: 0.0393 - val_loss: 0.0709\n",
      "Epoch 3/4\n",
      "60000/60000 [==============================] - 11s 180us/step - loss: 0.0321 - val_loss: 0.0614\n",
      "Epoch 4/4\n",
      "60000/60000 [==============================] - 10s 167us/step - loss: 0.0330 - val_loss: 0.0761\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x2eb30575518>"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train, Y_train,\n",
    "          batch_size=128, epochs=4,verbose=1,\n",
    "          validation_data=(X_test, Y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5 0 4 1 9 2 1 3]\n"
     ]
    }
   ],
   "source": [
    "predicted_classes = model.predict_classes(X_pred)\n",
    "print(predicted_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hn28inv00.jpg\n",
      "hn28inv01.jpg\n",
      "hn28inv02.jpg\n",
      "hn28inv03.jpg\n",
      "hn28inv10.jpg\n",
      "hn28inv11.jpg\n",
      "hn28inv12.jpg\n",
      "hn28inv13.jpg\n",
      "(8, 28, 28)\n",
      "Testing matrix shape (8, 784)\n",
      "[0, 0, 0, 1, 0, 1, 0, 0]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 8 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "img=cv2.imread(r\"C:\\Users\\huyunzhe\\kerasenv\\Scripts\\handnumbers2.jpg\")\n",
    "imshow=img.copy()\n",
    "#cv2.imshow(\"mw\",img)\n",
    "#cv2.waitKey(0)\n",
    "W=1280\n",
    "L=1700\n",
    "NW=650\n",
    "NL=900\n",
    "X0=250\n",
    "Y0=150\n",
    "\n",
    "for i in range(2):\n",
    "    for j in range(4):\n",
    "        x1=X0+L*i\n",
    "        y1=Y0+W*j\n",
    "        x2=x1+NL\n",
    "        y2=y1+NW\n",
    "        imdig=img[x1:x2,y1:y2]\n",
    "        cv2.imshow(\"imdig\",imdig)\n",
    "        cv2.waitKey()\n",
    "        cv2.rectangle(imshow,(y1,x1),(y2,x2),(0,255,0),3)\n",
    "        filename=\"hn\"+str(i)+str(j)+\".jpg\"\n",
    "        cv2.imwrite(filename,imdig)\n",
    "cv2.imshow(\"imdigall\",imshow)\n",
    "cv2.waitKey()\n",
    "cv2.destroyAllWindows()\n",
    "\n",
    "\n",
    "\n",
    "for i in range(2):\n",
    "    for j in range(4):\n",
    "        filename=\"hn\"+str(i)+str(j)+\".jpg\"\n",
    "        img = cv2.imread(filename)\n",
    "        GrayImage=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)  \n",
    "        ret,thresh1=cv2.threshold(GrayImage,100,255,cv2.THRESH_BINARY)  \n",
    "        resized_image = cv2.resize(thresh1, (28, 28)) \n",
    "        invimg = ~resized_image\n",
    "        outputfile=\"hn28inv\"+str(i)+str(j)+\".jpg\"\n",
    "        print(outputfile)\n",
    "        cv2.imwrite(outputfile,invimg)\n",
    "\n",
    "X_pred = numpy.zeros(shape=(8,28,28))\n",
    "index=0\n",
    "\n",
    "for i in range(2):\n",
    "    for j in range(4):\n",
    "        filename=\"hn28inv\"+str(i)+str(j)+\".jpg\"\n",
    "        img = cv2.imread(filename)\n",
    "        GrayImage=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n",
    "        X_pred[index]=cv2.resize(GrayImage, (28, 28))\n",
    "        index+=1\n",
    "print(X_pred.shape)\n",
    "\n",
    "for i in range(8):\n",
    "    plt.subplot(2,4,i+1)\n",
    "    plt.imshow(X_pred[i], cmap='gray', interpolation='none')\n",
    "    \n",
    "X_pred = X_pred.reshape(8, 784)\n",
    "X_pred = X_pred.astype('float32')\n",
    "X_pred /= 255\n",
    "print(\"Testing matrix shape\", X_pred.shape)\n",
    "predicted_classes = model.predict_classes(X_pred)\n",
    "number=[0,1,2,3,4,5,6,7]\n",
    "result=[]\n",
    "for i in range(8):\n",
    "    if predicted_classes[i] == number[i]:\n",
    "        result.append(1)\n",
    "    else :\n",
    "        result.append(0)\n",
    "print (result)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
